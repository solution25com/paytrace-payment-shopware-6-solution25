!function(){"use strict";var e={};e.p="bundles/paytrace/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/paytrace/"),function(){let{Component:e,Mixin:t}=Shopware;e.register("paytrace-api-test",{template:'<div>\n  <sw-button-process\n      :is-loading="isLoading"\n      :process-success="isSaveSuccessful"\n      @process-finish="saveFinish"\n      @click="check"\n  >\n    Test API Connection\n  </sw-button-process>\n</div>',props:["label"],inject:["paytraceApiTestService"],mixins:[t.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},computed:{pluginConfig(){let e=this.$parent;for(;void 0===e.actualConfigData;)e=e.$parent;return e.actualConfigData.null}},methods:{saveFinish(){this.isSaveSuccessful=!1},getCurrentSalesChannelId(){let e=this.$parent;for(;void 0===e.currentSalesChannelId;)e=e.$parent;return e.currentSalesChannelId},check(){this.isLoading=!0;let e={...this.pluginConfig,salesChannelId:this.getCurrentSalesChannelId()};this.paytraceApiTestService.check(e).then(e=>{e.success?(this.isSaveSuccessful=!0,this.createNotificationSuccess({title:this.$tc("Paytrace.apiTest.success.title"),message:this.$tc("Paytrace.apiTest.success.message")})):this.createNotificationError({title:this.$tc("Paytrace.apiTest.error.title"),message:this.$tc("Paytrace.apiTest.error.message")})}).catch(e=>{this.createNotificationError({title:"Paytrace API Test",message:e.response?.data?.errors?.[0]?.detail||e.message||"Connection failed!"})}).finally(()=>{this.isLoading=!1})}}});let s=Shopware.Classes.ApiService;class i extends s{constructor(e,t,s="paytrace-test-connection"){super(e,t,s)}check(e){let t=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/test-connection`,e,{headers:t}).then(e=>s.handleResponse(e))}}Shopware.Service().register("paytraceApiTestService",()=>new i(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService")))}()}();