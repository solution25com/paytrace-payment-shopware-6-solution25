{% extends '@Storefront/storefront/page/account/index.html.twig' %}

{% block page_account_main_content %}

  <div class="payTrace-saved b2b-create-title-text">
    <input type="hidden" name="parentname" value="payTrace Saved Cards">
  </div>

  <div class="text-center my-4">
    <button class="btn btn-outline-primary" type="button" id="toggleAddCardForm">
      + Add New Card
    </button>
  </div>

  <div class="container" id="addCardFormContainer" style="display: none;">
    <div class="card shadow-sm mb-4">
      <div class="card-body">
        <h5 class="card-title text-center mb-4">Add a New Card</h5>
        <form class="paytrace-form-container">
          <div class="mb-3">
            <label for="nameSurname" class="form-label">Name</label>
            <input type="text" class="form-control" id="nameSurname" name="nameSurname" required />
          </div>

          <div class="row">
            <div class="col-md-6 mb-2">
              <label for="streetAddress" class="form-label">Street Address*</label>
              <input type="text" class="form-control form-control-sm" id="streetAddress" name="streetAddress" required />
            </div>

            <div class="col-md-6 mb-2">
              <label for="streetAddress2" class="form-label">Street Address 2</label>
              <input type="text" class="form-control form-control-sm" id="streetAddress2" name="streetAddress2" />
            </div>
          </div>

          <div class="row">
            <div class="col-md-6 mb-2">
              <label for="city" class="form-label">City*</label>
              <input type="text" class="form-control form-control-sm" id="city" name="city" required />
            </div>

            <div class="col-md-6 mb-2">
              <label for="state" class="form-label">State*</label>
              <select id="state" name="state" class="form-select form-select-sm" required>
                <option value="">-- Select State --</option>
                <option value="AL">Alabama</option>
                <option value="AK">Alaska</option>
                <option value="AZ">Arizona</option>
                <option value="AR">Arkansas</option>
                <option value="CA">California</option>
                <option value="CO">Colorado</option>
                <option value="CT">Connecticut</option>
                <option value="DE">Delaware</option>
                <option value="DC">District of Columbia</option>
                <option value="FL">Florida</option>
                <option value="GA">Georgia</option>
                <option value="HI">Hawaii</option>
                <option value="ID">Idaho</option>
                <option value="IL">Illinois</option>
                <option value="IN">Indiana</option>
                <option value="IA">Iowa</option>
                <option value="KS">Kansas</option>
                <option value="KY">Kentucky</option>
                <option value="LA">Louisiana</option>
                <option value="ME">Maine</option>
                <option value="MD">Maryland</option>
                <option value="MA">Massachusetts</option>
                <option value="MI">Michigan</option>
                <option value="MN">Minnesota</option>
                <option value="MS">Mississippi</option>
                <option value="MO">Missouri</option>
                <option value="MT">Montana</option>
                <option value="NE">Nebraska</option>
                <option value="NV">Nevada</option>
                <option value="NH">New Hampshire</option>
                <option value="NJ">New Jersey</option>
                <option value="NM">New Mexico</option>
                <option value="NY">New York</option>
                <option value="NC">North Carolina</option>
                <option value="ND">North Dakota</option>
                <option value="OH">Ohio</option>
                <option value="OK">Oklahoma</option>
                <option value="OR">Oregon</option>
                <option value="PA">Pennsylvania</option>
                <option value="RI">Rhode Island</option>
                <option value="SC">South Carolina</option>
                <option value="SD">South Dakota</option>
                <option value="TN">Tennessee</option>
                <option value="TX">Texas</option>
                <option value="UT">Utah</option>
                <option value="VT">Vermont</option>
                <option value="VA">Virginia</option>
                <option value="WA">Washington</option>
                <option value="WV">West Virginia</option>
                <option value="WI">Wisconsin</option>
                <option value="WY">Wyoming</option>
                <option value="AS">American Samoa</option>
                <option value="GU">Guam</option>
                <option value="MP">Northern Mariana Islands</option>
                <option value="PR">Puerto Rico</option>
                <option value="VI">U.S. Virgin Islands</option>
                <option value="AA">Armed Forces Americas</option>
                <option value="AE">Armed Forces Europe</option>
                <option value="AP">Armed Forces Pacific</option>
              </select>
            </div>

            <div class="row">
            <div class="col-md-6 mb-2">
              <label for="postalCode" class="form-label">Postal Code*</label>
              <input type="text" class="form-control form-control-sm" id="postalCode" name="postalCode" required />
            </div>

            <div class="col-md-6 mb-2">
              <label for="country" class="form-label">Country*</label>
              <select id="country" name="country" class="form-select form-select-sm" required>
                <option value="">Select Country</option>
                <option value="US" selected> United States </option>
              </select>
            </div>
          </div>

          <div id="pt_hpf_form" class="my-3"></div>
          <div id="errorContainer" class="error-container" style="display: none;"></div>

          <button type="button" id="ProtectForm" class="btn btn-primary w-100 mt-3">Add Card</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  {% if savedCards is not empty %}
    <div class="container mt-4">
      <div class="row">
        {% for card in savedCards %}
          <div class="col-12 col-sm-6 col-md-6 col-lg-6 mb-3">
            <div class="saved-card p-3 border rounded-3 shadow-sm hover-card">
              <div class="card-info">
                <p class="card-holder-name mb-1"><strong>{{ card.cardHolderName }}</strong></p>
                <p class="card-type mb-1">{{ card.cardType }}</p>
                <p class="vaulted-customer-id mb-1">ID: {{ card.vaultedCustomerId }}</p>
                <div class="card-number mb-2">
                  <span>**** **** **** {{ card.cardNumber|slice(12, 16) }}</span>
                </div>
                <button class="btn btn-danger delete-card-btn mt-2" data-card-id="{{ card.vaultedCustomerId }}">Delete</button>
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>

  {% else %}
    <p class="text-center mt-4">No saved cards found.</p>
  {% endif %}

  <script src="https://protect.sandbox.paytrace.com/js/protect.min.js"></script>

  <script>
      document.addEventListener("DOMContentLoaded", function () {
          const toggleBtn = document.getElementById("toggleAddCardForm");
          const formContainer = document.getElementById("addCardFormContainer");
          const protectFormButton = document.getElementById("ProtectForm");

          toggleBtn?.addEventListener("click", () => {
              const isHidden = formContainer.style.display === "none";
              formContainer.style.display = isHidden ? "block" : "none";
              toggleBtn.textContent = isHidden ? "âˆ’ Hide Form" : "+ Add New Card";
          });

          function _validateBillingData() {
              const requiredFields = [
                  { id: 'nameSurname', name: 'Name' },
                  { id: 'streetAddress', name: 'Street Address' },
                  { id: 'city', name: 'City' },
                  { id: 'state', name: 'State' },
                  { id: 'postalCode', name: 'Postal Code' },
                  { id: 'country', name: 'Country' }
              ];

              let errors = [];
              for (const field of requiredFields) {
                  const el = document.getElementById(field.id);
                  if (!el || !el.value.trim()) {
                      errors.push(`${field.name} is required.`);
                  }
              }

              if (errors.length > 0) {
                  _showError(errors);
                  return false;
              }
              return true;
          }

          function _showError(errors) {
              const errorContainer = document.getElementById('errorContainer');
              errorContainer.innerHTML = '';

              if (errors.length > 0) {
                  errorContainer.style.display = 'block';
                  errors.forEach(error => {
                      const errorElement = document.createElement('div');
                      errorElement.classList.add('error-message');
                      errorElement.textContent = error;
                      errorContainer.appendChild(errorElement);
                  });
              } else {
                  errorContainer.style.display = 'none';
              }
          }

          PTPayment.setup({
              authorization: { clientKey: '{{ paymentToken }}' },
              styles: {
                  cc: {
                      background_color: '#ffffff',
                      border_style: 'solid',
                      font_color: '#495057',
                      font_size: '14px',
                      input_border_width: '1px',
                      input_font: 'Segoe UI, sans-serif',
                      input_font_weight: '400',
                      input_margin: '3px 0px 10px 0px',
                      input_padding: '3px 8px 3px 8px',
                      label_color: '#495057',
                      label_font: 'Segoe UI, sans-serif',
                      label_font_weight: '500',
                      label_size: '12px',
                      label_width: 'auto',
                      label_margin: '0 0 4px 0',
                      label_padding: '0 4px',
                      label_border_style: 'none',
                      height: '32px',
                      width: '95%',
                      padding_bottom: '4px'
                  },
                  code: {
                      background_color: '#ffffff',
                      border_style: 'solid',
                      font_color: '#495057',
                      font_size: '14px',
                      input_border_width: '1px',
                      input_font: 'Segoe UI, sans-serif',
                      input_font_weight: '400',
                      input_margin: '5px 0px 10px 0px',
                      input_padding: '4px 8px 4px 8px',
                      label_color: '#495057',
                      label_font: 'Segoe UI, sans-serif',
                      label_font_weight: '500',
                      label_size: '13px',
                      label_width: 'auto',
                      label_margin: '0 0 4px 0',
                      label_padding: '0 4px',
                      label_border_style: 'none',
                      height: '32px',
                      width: '95%',
                      padding_bottom: '4px'
                  },
                  exp: {
                      background_color: '#ffffff',
                      border_style: 'solid',
                      font_color: '#495057',
                      font_size: '14px',
                      input_border_width: '1px',
                      input_font: 'Segoe UI, sans-serif',
                      input_font_weight: '400',
                      input_margin: '5px 0px 10px 0px',
                      input_padding: '4px 8px 4px 8px',
                      label_color: '#495057',
                      label_font: 'Segoe UI, sans-serif',
                      label_font_weight: '500',
                      label_size: '13px',
                      label_width: 'auto',
                      label_margin: '0 0 4px 0',
                      label_padding: '0 4px',
                      label_border_style: 'none',
                      height: '32px',
                      width: '100%',
                      padding_bottom: '4px',
                      type: 'dropdown'
                  },
                  body: {
                      background_color: '#ffffff'
                  }
              }
          }).then(function(instance) {
              console.warn('PayTrace setup complete');
          }).catch(function(error) {
              console.error('Error during PayTrace setup:', error);
          });

          protectFormButton.addEventListener('click', function() {
              if (!_validateBillingData()) return;

              const name = document.getElementById('nameSurname').value;
              const streetAddress = document.getElementById('streetAddress').value;
              const streetAddress2 = document.getElementById('streetAddress2').value;
              const city = document.getElementById('city').value;
              const state = document.getElementById('state').value;
              const postalCode = document.getElementById('postalCode').value;
              const country = document.getElementById('country').value;

              PTPayment.process()
                  .then(async function(result) {
                      if (result.message) {
                          const requestData = {
                              cardToken: result.message,
                              billing_address: {
                                  name: name,
                                  street_address: streetAddress,
                                  ...(streetAddress2 && { street_address2: streetAddress2 }),
                                  city: city,
                                  state: state,
                                  postal_code: postalCode,
                                  country: country,
                              },
                          };

                          try {
                              const response = await fetch('/account/payTrace-saved-cards/add-card', {
                                  method: 'POST',
                                  headers: {
                                      'Content-Type': 'application/json',
                                  },
                                  body: JSON.stringify(requestData),
                              });

                              const res = await response.json();
                              console.log('response', res)
                              if (res.error) {
                                  console.log('1',res.error)
                                  console.error('Error from backend:', res.message);
                                  alert('Failed to add card: ' + res.message);
                              } else {
                                  alert('Successfully added card');
                                  location.reload();
                              }
                          } catch (err) {
                              console.log('2',err)
                              console.error('Error during fetch request:', err);
                          }
                      } else {
                          console.log('3')
                          console.error('Failed to receive a card token');
                      }
                  })
                  .catch(function(error) {
                      console.log('4', error)
                      console.error('Error during payment processing:', error);
                  });
          });

          document.querySelectorAll('.delete-card-btn').forEach(button => {
              button.addEventListener('click', async function(event) {
                  const cardId = event.target.getAttribute('data-card-id');
                  const confirmed = confirm('Are you sure you want to delete this card?');
                  if (!confirmed) return;

                  try {
                      const response = await fetch(`/account/payTrace-saved-cards/delete-card/${cardId}`, {
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json',
                          },
                          body: JSON.stringify({ cardId: cardId }),
                      });

                      const res = await response.json();
                      if (res.error) {
                          alert('Failed to delete the card');
                          console.error('Error:', res.message);
                      } else {
                          alert('Card deleted successfully');
                          event.target.closest('.saved-card').remove();
                      }
                  } catch (err) {
                      console.error('Error during delete request:', err);
                      alert('An error occurred while deleting the card');
                  }
              });
          });
      });
  </script>

  <style>
      .saved-card {
          transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
          background-color: #fff;
      }

      .saved-card:hover {
          transform: translateY(-4px);
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      }

      .card-info {
          display: flex;
          flex-direction: column;
      }

      .delete-card-btn {
          width: 100%;
      }
      #pt_hpf_form iframe {
          /*width: 90% !important;*/
          height: 300px !important;
          margin-top:25px;
          border: none;
          overflow: hidden;
      }
      .error-container {
          background-color: #f8d7da;
          color: #721c24;
          padding: 10px;
          margin-top: 10px;
          border-radius: 5px;
      }

  </style>

{% endblock %}
